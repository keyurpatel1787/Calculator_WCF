//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CalculatorWeb.ServiceReferenceCalculator {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceCalculator.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Addition", ReplyAction="http://tempuri.org/ICalculator/AdditionResponse")]
        double Addition(double firstvalue, double secondvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Addition", ReplyAction="http://tempuri.org/ICalculator/AdditionResponse")]
        System.Threading.Tasks.Task<double> AdditionAsync(double firstvalue, double secondvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Subtraction", ReplyAction="http://tempuri.org/ICalculator/SubtractionResponse")]
        double Subtraction(double firstvalue, double secondvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Subtraction", ReplyAction="http://tempuri.org/ICalculator/SubtractionResponse")]
        System.Threading.Tasks.Task<double> SubtractionAsync(double firstvalue, double secondvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Multiplication", ReplyAction="http://tempuri.org/ICalculator/MultiplicationResponse")]
        double Multiplication(double firstvalue, double secondvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Multiplication", ReplyAction="http://tempuri.org/ICalculator/MultiplicationResponse")]
        System.Threading.Tasks.Task<double> MultiplicationAsync(double firstvalue, double secondvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Division", ReplyAction="http://tempuri.org/ICalculator/DivisionResponse")]
        double Division(double firstvalue, double secondvalue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Division", ReplyAction="http://tempuri.org/ICalculator/DivisionResponse")]
        System.Threading.Tasks.Task<double> DivisionAsync(double firstvalue, double secondvalue);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : CalculatorWeb.ServiceReferenceCalculator.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<CalculatorWeb.ServiceReferenceCalculator.ICalculator>, CalculatorWeb.ServiceReferenceCalculator.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Addition(double firstvalue, double secondvalue) {
            return base.Channel.Addition(firstvalue, secondvalue);
        }
        
        public System.Threading.Tasks.Task<double> AdditionAsync(double firstvalue, double secondvalue) {
            return base.Channel.AdditionAsync(firstvalue, secondvalue);
        }
        
        public double Subtraction(double firstvalue, double secondvalue) {
            return base.Channel.Subtraction(firstvalue, secondvalue);
        }
        
        public System.Threading.Tasks.Task<double> SubtractionAsync(double firstvalue, double secondvalue) {
            return base.Channel.SubtractionAsync(firstvalue, secondvalue);
        }
        
        public double Multiplication(double firstvalue, double secondvalue) {
            return base.Channel.Multiplication(firstvalue, secondvalue);
        }
        
        public System.Threading.Tasks.Task<double> MultiplicationAsync(double firstvalue, double secondvalue) {
            return base.Channel.MultiplicationAsync(firstvalue, secondvalue);
        }
        
        public double Division(double firstvalue, double secondvalue) {
            return base.Channel.Division(firstvalue, secondvalue);
        }
        
        public System.Threading.Tasks.Task<double> DivisionAsync(double firstvalue, double secondvalue) {
            return base.Channel.DivisionAsync(firstvalue, secondvalue);
        }
    }
}
